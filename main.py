# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainMenu.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from transformers import AutoTokenizer, AutoModelForQuestionAnswering
import torch
import squadconvert
from random import randrange

#import time

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(771, 326)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 238, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 246, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(113, 119, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(151, 159, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 238, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 246, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 238, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 246, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(113, 119, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(151, 159, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 238, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 246, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(113, 119, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 238, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 246, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(113, 119, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(151, 159, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(113, 119, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(113, 119, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 238, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 238, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 238, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        MainWindow.setPalette(palette)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 20, 751, 301))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.txe_DataInput = QtWidgets.QTextEdit(self.groupBox)
        self.txe_DataInput.setGeometry(QtCore.QRect(10, 20, 641, 191))
        self.txe_DataInput.setLineWrapMode(QtWidgets.QTextEdit.FixedColumnWidth)
        self.txe_DataInput.setLineWrapColumnOrWidth(106)
        self.txe_DataInput.setObjectName("txe_DataInput")
        self.lbl_Question = QtWidgets.QLabel(self.groupBox)
        self.lbl_Question.setGeometry(QtCore.QRect(10, 230, 47, 13))
        self.lbl_Question.setObjectName("lbl_Question")
        self.lbl_DataInput = QtWidgets.QLabel(self.groupBox)
        self.lbl_DataInput.setGeometry(QtCore.QRect(10, 0, 61, 16))
        self.lbl_DataInput.setObjectName("lbl_DataInput")
        self.btn_QAsk = QtWidgets.QPushButton(self.groupBox)
        self.btn_QAsk.setGeometry(QtCore.QRect(550, 260, 91, 31))
        self.btn_QAsk.setObjectName("btn_QAsk")
        self.txe_Answer = QtWidgets.QTextEdit(self.groupBox)
        self.txe_Answer.setGeometry(QtCore.QRect(60, 260, 481, 31))
        self.txe_Answer.setObjectName("txe_Answer")
        self.txe_Question = QtWidgets.QTextEdit(self.groupBox)
        self.txe_Question.setGeometry(QtCore.QRect(60, 220, 681, 31))
        self.txe_Question.setObjectName("txe_Question")
        self.lbl_Answer = QtWidgets.QLabel(self.groupBox)
        self.lbl_Answer.setGeometry(QtCore.QRect(10, 270, 47, 13))
        self.lbl_Answer.setObjectName("lbl_Answer")
        self.btn_Close = QtWidgets.QPushButton(self.groupBox)
        self.btn_Close.setGeometry(QtCore.QRect(650, 260, 91, 31))
        self.btn_Close.setObjectName("btn_Close")
        self.rdb_model1 = QtWidgets.QRadioButton(self.groupBox)
        self.rdb_model1.setGeometry(QtCore.QRect(670, 30, 71, 17))
        self.rdb_model1.setObjectName("rdb_model1")
        self.rdb_model2 = QtWidgets.QRadioButton(self.groupBox)
        self.rdb_model2.setGeometry(QtCore.QRect(670, 70, 71, 17))
        self.rdb_model2.setObjectName("rdb_model2")
        self.rdb_model3 = QtWidgets.QRadioButton(self.groupBox)
        self.rdb_model3.setGeometry(QtCore.QRect(670, 110, 71, 17))
        self.rdb_model3.setChecked(True)
        self.rdb_model3.setObjectName("rdb_model3")
        self.rdb_model4 = QtWidgets.QRadioButton(self.groupBox)
        self.rdb_model4.setGeometry(QtCore.QRect(670, 150, 71, 17))
        self.rdb_model4.setObjectName("rdb_model4")
        self.btn_Test = QtWidgets.QPushButton(self.groupBox)
        self.btn_Test.setGeometry(QtCore.QRect(660, 180, 81, 31))
        self.btn_Test.setObjectName("btn_Test")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.btn_QAsk.clicked.connect(self.answerQuestion)
        self.btn_Close.clicked.connect(self.closeApplication)
        self.btn_Test.clicked.connect(self.testMode)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.lbl_Question.setText(_translate("MainWindow", "Question"))
        self.lbl_DataInput.setText(_translate("MainWindow", "Data Input"))
        self.btn_QAsk.setText(_translate("MainWindow", "Ask Question"))
        self.lbl_Answer.setText(_translate("MainWindow", "Answer"))
        self.btn_Close.setText(_translate("MainWindow", "Close Application"))
        self.rdb_model1.setText(_translate("MainWindow", "BERT"))
        self.rdb_model2.setText(_translate("MainWindow", "PruneBERT"))
        self.rdb_model3.setText(_translate("MainWindow", "DistilBERT"))
        self.rdb_model4.setText(_translate("MainWindow", "BioBERT"))
        self.btn_Test.setText(_translate("MainWindow", "Test Model"))

    def answerQuestion(self):
        text = ui.txe_DataInput.toPlainText()
        question = ui.txe_Question.toPlainText()
        answer = ""
        if ui.rdb_model1.isChecked():
            modelname = "deepset/bert-large-uncased-whole-word-masking-squad2"
        elif ui.rdb_model2.isChecked():
            modelname = "huggingface/prunebert-base-uncased-6-finepruned-w-distil-squad"
        elif ui.rdb_model3.isChecked():
            modelname = "distilbert-base-uncased-distilled-squad"
        else:
            modelname = "dmis-lab/biobert-base-cased-v1.1-squad"

        tokenizer = AutoTokenizer.from_pretrained(modelname)
        model = AutoModelForQuestionAnswering.from_pretrained(modelname)

        inputs = tokenizer.encode_plus(question, text, add_special_tokens=True, return_tensors="pt")
        input_ids = inputs["input_ids"].tolist()[0]

        answer_start_scores, answer_end_scores = model(**inputs)

        answer_start = torch.argmax(answer_start_scores)  # Get the most likely beginning of answer with the argmax of the score
        answer_end = torch.argmax(answer_end_scores) + 1  # Get the most likely end of answer with the argmax of the score

        answer = tokenizer.convert_tokens_to_string(tokenizer.convert_ids_to_tokens(input_ids[answer_start:answer_end]))

        print("Answer is given via "+ modelname)
        ui.txe_Answer.setText(answer)

    def closeApplication(self):
        exit()

    def testMode(self):
        if ui.rdb_model1.isChecked():
            modelname = "deepset/bert-large-uncased-whole-word-masking-squad2"
        elif ui.rdb_model2.isChecked():
            modelname = "huggingface/prunebert-base-uncased-6-finepruned-w-distil-squad"
        elif ui.rdb_model3.isChecked():
            modelname = "distilbert-base-uncased-distilled-squad"
        else:
            modelname = "dmis-lab/biobert-base-cased-v1.1-squad"
        tokenizer = AutoTokenizer.from_pretrained(modelname)
        model = AutoModelForQuestionAnswering.from_pretrained(modelname)

        input_file_path = 'testQA.json'
        dataTest = squadconvert.squad_json_to_dataframe_train(input_file_path=input_file_path)

        count = 500
        i = randrange(1,int(87598/count),1)
        score = 0
        testCount = i + count;
        while i < testCount:
            i += 1
            question = dataTest.question[i]
            text = dataTest.context[i]
            trueAnswer = dataTest.text[i]
            trueAnswer = trueAnswer.lower()
            trueAnswer = trueAnswer.replace(" ", "")

            inputs = tokenizer.encode_plus(question, text, add_special_tokens=True, return_tensors="pt")
            input_ids = inputs["input_ids"].tolist()[0]

            text_tokens = tokenizer.convert_ids_to_tokens(input_ids)
            answer_start_scores, answer_end_scores = model(**inputs)

            answer_start = torch.argmax(answer_start_scores)  # Get the most likely beginning of answer with the argmax of the score
            answer_end = torch.argmax(answer_end_scores) + 1  # Get the most likely end of answer with the argmax of the score

            answer = tokenizer.convert_tokens_to_string(tokenizer.convert_ids_to_tokens(input_ids[answer_start:answer_end]))
            answer = answer.lower()
            answer = answer.replace(" ", "")
            if trueAnswer == answer or trueAnswer.__contains__(answer) or answer.__contains__(trueAnswer):
                score +=1

        score = score/count
        if ui.rdb_model1.isChecked():
            ui.txe_Answer.setText("Score of BERT is : "  + str(score))
        elif ui.rdb_model2.isChecked():
            ui.txe_Answer.setText("Score of PruneBERT is : "  + str(score))
        elif ui.rdb_model3.isChecked():
            ui.txe_Answer.setText("Score of DistilBERT is : "  + str(score))
        else:
            ui.txe_Answer.setText("Score of BioBERT is : "  + str(score))

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    sys.exit(app.exec_())